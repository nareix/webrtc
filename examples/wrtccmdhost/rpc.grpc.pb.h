// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class Rpc final {
 public:
  static constexpr char const* service_full_name() {
    return "Rpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status NewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::NewPCRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>> AsyncNewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>>(AsyncNewPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>> PrepareAsyncNewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>>(PrepareAsyncNewPCRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>> AsyncCreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>>(AsyncCreateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>> PrepareAsyncCreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>>(PrepareAsyncCreateOfferRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>> AsyncCreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>>(AsyncCreateAnswerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>> PrepareAsyncCreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>>(PrepareAsyncCreateAnswerRaw(context, request, cq));
    }
    virtual ::grpc::Status SetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>> AsyncSetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>>(AsyncSetLocalDescRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>> PrepareAsyncSetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>>(PrepareAsyncSetLocalDescRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>> AsyncSetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>>(AsyncSetRemoteDescRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>> PrepareAsyncSetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>>(PrepareAsyncSetRemoteDescRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddTracksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddTracksRaw(context, request, cq));
    }
    virtual ::grpc::Status NewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::NewUrlTracksRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>> AsyncNewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>>(AsyncNewUrlTracksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>> PrepareAsyncNewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>>(PrepareAsyncNewUrlTracksRaw(context, request, cq));
    }
    virtual ::grpc::Status NewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::NewTrackSrcsRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>> AsyncNewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>>(AsyncNewTrackSrcsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>> PrepareAsyncNewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>>(PrepareAsyncNewTrackSrcsRaw(context, request, cq));
    }
    virtual ::grpc::Status TrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncTrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncTrackSrcSendPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncTrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncTrackSrcSendPacketRaw(context, request, cq));
    }
    virtual ::grpc::Status OnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncOnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncOnTrackPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncOnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncOnTrackPacketRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>* AsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewPCRes>* PrepareAsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>* AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>* PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>* AsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OfferAnswerRes>* PrepareAsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>* AsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>* PrepareAsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>* AsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetDescRes>* PrepareAsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>* AsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewUrlTracksRes>* PrepareAsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>* AsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NewTrackSrcsRes>* PrepareAsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::NewPCRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewPCRes>> AsyncNewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewPCRes>>(AsyncNewPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewPCRes>> PrepareAsyncNewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewPCRes>>(PrepareAsyncNewPCRaw(context, request, cq));
    }
    ::grpc::Status CreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>> AsyncCreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>>(AsyncCreateOfferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>> PrepareAsyncCreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>>(PrepareAsyncCreateOfferRaw(context, request, cq));
    }
    ::grpc::Status CreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>> AsyncCreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>>(AsyncCreateAnswerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>> PrepareAsyncCreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>>(PrepareAsyncCreateAnswerRaw(context, request, cq));
    }
    ::grpc::Status SetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>> AsyncSetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>>(AsyncSetLocalDescRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>> PrepareAsyncSetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>>(PrepareAsyncSetLocalDescRaw(context, request, cq));
    }
    ::grpc::Status SetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>> AsyncSetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>>(AsyncSetRemoteDescRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>> PrepareAsyncSetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetDescRes>>(PrepareAsyncSetRemoteDescRaw(context, request, cq));
    }
    ::grpc::Status AddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddTracksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddTracksRaw(context, request, cq));
    }
    ::grpc::Status NewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::NewUrlTracksRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>> AsyncNewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>>(AsyncNewUrlTracksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>> PrepareAsyncNewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>>(PrepareAsyncNewUrlTracksRaw(context, request, cq));
    }
    ::grpc::Status NewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::NewTrackSrcsRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>> AsyncNewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>>(AsyncNewTrackSrcsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>> PrepareAsyncNewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>>(PrepareAsyncNewTrackSrcsRaw(context, request, cq));
    }
    ::grpc::Status TrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncTrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncTrackSrcSendPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncTrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncTrackSrcSendPacketRaw(context, request, cq));
    }
    ::grpc::Status OnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncOnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncOnTrackPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncOnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncOnTrackPacketRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::NewPCRes>* AsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewPCRes>* PrepareAsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* AsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* PrepareAsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetDescRes>* AsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetDescRes>* PrepareAsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetDescRes>* AsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetDescRes>* PrepareAsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>* AsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>* PrepareAsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>* AsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>* PrepareAsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewPC_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOffer_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAnswer_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLocalDesc_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRemoteDesc_;
    const ::grpc::internal::RpcMethod rpcmethod_AddTracks_;
    const ::grpc::internal::RpcMethod rpcmethod_NewUrlTracks_;
    const ::grpc::internal::RpcMethod rpcmethod_NewTrackSrcs_;
    const ::grpc::internal::RpcMethod rpcmethod_TrackSrcSendPacket_;
    const ::grpc::internal::RpcMethod rpcmethod_OnTrackPacket_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status NewPC(::grpc::ServerContext* context, const ::NewPCReq* request, ::NewPCRes* response);
    virtual ::grpc::Status CreateOffer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response);
    virtual ::grpc::Status CreateAnswer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response);
    virtual ::grpc::Status SetLocalDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response);
    virtual ::grpc::Status SetRemoteDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response);
    virtual ::grpc::Status AddTracks(::grpc::ServerContext* context, const ::AddTracksReq* request, ::Empty* response);
    virtual ::grpc::Status NewUrlTracks(::grpc::ServerContext* context, const ::NewUrlTracksReq* request, ::NewUrlTracksRes* response);
    virtual ::grpc::Status NewTrackSrcs(::grpc::ServerContext* context, const ::Empty* request, ::NewTrackSrcsRes* response);
    virtual ::grpc::Status TrackSrcSendPacket(::grpc::ServerContext* context, const ::TrackSrcSendPacketReq* request, ::Empty* response);
    virtual ::grpc::Status OnTrackPacket(::grpc::ServerContext* context, const ::OnTrackPacketMsg* request, ::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewPC() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPC(::grpc::ServerContext* context, const ::NewPCReq* request, ::NewPCRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewPC(::grpc::ServerContext* context, ::NewPCReq* request, ::grpc::ServerAsyncResponseWriter< ::NewPCRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateOffer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOffer(::grpc::ServerContext* context, ::OfferAnswerReq* request, ::grpc::ServerAsyncResponseWriter< ::OfferAnswerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAnswer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnswer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAnswer(::grpc::ServerContext* context, ::OfferAnswerReq* request, ::grpc::ServerAsyncResponseWriter< ::OfferAnswerRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLocalDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetLocalDesc() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetLocalDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocalDesc(::grpc::ServerContext* context, ::SetDescReq* request, ::grpc::ServerAsyncResponseWriter< ::SetDescRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRemoteDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetRemoteDesc() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetRemoteDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRemoteDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRemoteDesc(::grpc::ServerContext* context, ::SetDescReq* request, ::grpc::ServerAsyncResponseWriter< ::SetDescRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTracks() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTracks(::grpc::ServerContext* context, const ::AddTracksReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTracks(::grpc::ServerContext* context, ::AddTracksReq* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewUrlTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewUrlTracks() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_NewUrlTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUrlTracks(::grpc::ServerContext* context, const ::NewUrlTracksReq* request, ::NewUrlTracksRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewUrlTracks(::grpc::ServerContext* context, ::NewUrlTracksReq* request, ::grpc::ServerAsyncResponseWriter< ::NewUrlTracksRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewTrackSrcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewTrackSrcs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_NewTrackSrcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewTrackSrcs(::grpc::ServerContext* context, const ::Empty* request, ::NewTrackSrcsRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewTrackSrcs(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::NewTrackSrcsRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TrackSrcSendPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TrackSrcSendPacket() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TrackSrcSendPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackSrcSendPacket(::grpc::ServerContext* context, const ::TrackSrcSendPacketReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrackSrcSendPacket(::grpc::ServerContext* context, ::TrackSrcSendPacketReq* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnTrackPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnTrackPacket() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_OnTrackPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTrackPacket(::grpc::ServerContext* context, const ::OnTrackPacketMsg* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnTrackPacket(::grpc::ServerContext* context, ::OnTrackPacketMsg* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewPC<WithAsyncMethod_CreateOffer<WithAsyncMethod_CreateAnswer<WithAsyncMethod_SetLocalDesc<WithAsyncMethod_SetRemoteDesc<WithAsyncMethod_AddTracks<WithAsyncMethod_NewUrlTracks<WithAsyncMethod_NewTrackSrcs<WithAsyncMethod_TrackSrcSendPacket<WithAsyncMethod_OnTrackPacket<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_NewPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewPC() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewPC(::grpc::ServerContext* context, const ::NewPCReq* request, ::NewPCRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateOffer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAnswer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnswer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLocalDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetLocalDesc() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetLocalDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRemoteDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetRemoteDesc() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetRemoteDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRemoteDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTracks() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTracks(::grpc::ServerContext* context, const ::AddTracksReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewUrlTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewUrlTracks() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_NewUrlTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewUrlTracks(::grpc::ServerContext* context, const ::NewUrlTracksReq* request, ::NewUrlTracksRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewTrackSrcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewTrackSrcs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_NewTrackSrcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewTrackSrcs(::grpc::ServerContext* context, const ::Empty* request, ::NewTrackSrcsRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TrackSrcSendPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TrackSrcSendPacket() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TrackSrcSendPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackSrcSendPacket(::grpc::ServerContext* context, const ::TrackSrcSendPacketReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnTrackPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnTrackPacket() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_OnTrackPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnTrackPacket(::grpc::ServerContext* context, const ::OnTrackPacketMsg* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewPC() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::NewPCReq, ::NewPCRes>(std::bind(&WithStreamedUnaryMethod_NewPC<BaseClass>::StreamedNewPC, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewPC(::grpc::ServerContext* context, const ::NewPCReq* request, ::NewPCRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewPC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NewPCReq,::NewPCRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOffer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateOffer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::OfferAnswerReq, ::OfferAnswerRes>(std::bind(&WithStreamedUnaryMethod_CreateOffer<BaseClass>::StreamedCreateOffer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateOffer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOffer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOffer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OfferAnswerReq,::OfferAnswerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAnswer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::OfferAnswerReq, ::OfferAnswerRes>(std::bind(&WithStreamedUnaryMethod_CreateAnswer<BaseClass>::StreamedCreateAnswer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAnswer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAnswer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OfferAnswerReq,::OfferAnswerRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLocalDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetLocalDesc() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::SetDescReq, ::SetDescRes>(std::bind(&WithStreamedUnaryMethod_SetLocalDesc<BaseClass>::StreamedSetLocalDesc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetLocalDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLocalDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLocalDesc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetDescReq,::SetDescRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRemoteDesc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetRemoteDesc() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::SetDescReq, ::SetDescRes>(std::bind(&WithStreamedUnaryMethod_SetRemoteDesc<BaseClass>::StreamedSetRemoteDesc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRemoteDesc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRemoteDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRemoteDesc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetDescReq,::SetDescRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTracks() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::AddTracksReq, ::Empty>(std::bind(&WithStreamedUnaryMethod_AddTracks<BaseClass>::StreamedAddTracks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTracks(::grpc::ServerContext* context, const ::AddTracksReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTracks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AddTracksReq,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewUrlTracks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewUrlTracks() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::NewUrlTracksReq, ::NewUrlTracksRes>(std::bind(&WithStreamedUnaryMethod_NewUrlTracks<BaseClass>::StreamedNewUrlTracks, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewUrlTracks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewUrlTracks(::grpc::ServerContext* context, const ::NewUrlTracksReq* request, ::NewUrlTracksRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewUrlTracks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NewUrlTracksReq,::NewUrlTracksRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewTrackSrcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewTrackSrcs() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::Empty, ::NewTrackSrcsRes>(std::bind(&WithStreamedUnaryMethod_NewTrackSrcs<BaseClass>::StreamedNewTrackSrcs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewTrackSrcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewTrackSrcs(::grpc::ServerContext* context, const ::Empty* request, ::NewTrackSrcsRes* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewTrackSrcs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::NewTrackSrcsRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TrackSrcSendPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TrackSrcSendPacket() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::TrackSrcSendPacketReq, ::Empty>(std::bind(&WithStreamedUnaryMethod_TrackSrcSendPacket<BaseClass>::StreamedTrackSrcSendPacket, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TrackSrcSendPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TrackSrcSendPacket(::grpc::ServerContext* context, const ::TrackSrcSendPacketReq* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTrackSrcSendPacket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TrackSrcSendPacketReq,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnTrackPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnTrackPacket() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::OnTrackPacketMsg, ::Empty>(std::bind(&WithStreamedUnaryMethod_OnTrackPacket<BaseClass>::StreamedOnTrackPacket, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnTrackPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnTrackPacket(::grpc::ServerContext* context, const ::OnTrackPacketMsg* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnTrackPacket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OnTrackPacketMsg,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewPC<WithStreamedUnaryMethod_CreateOffer<WithStreamedUnaryMethod_CreateAnswer<WithStreamedUnaryMethod_SetLocalDesc<WithStreamedUnaryMethod_SetRemoteDesc<WithStreamedUnaryMethod_AddTracks<WithStreamedUnaryMethod_NewUrlTracks<WithStreamedUnaryMethod_NewTrackSrcs<WithStreamedUnaryMethod_TrackSrcSendPacket<WithStreamedUnaryMethod_OnTrackPacket<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewPC<WithStreamedUnaryMethod_CreateOffer<WithStreamedUnaryMethod_CreateAnswer<WithStreamedUnaryMethod_SetLocalDesc<WithStreamedUnaryMethod_SetRemoteDesc<WithStreamedUnaryMethod_AddTracks<WithStreamedUnaryMethod_NewUrlTracks<WithStreamedUnaryMethod_NewTrackSrcs<WithStreamedUnaryMethod_TrackSrcSendPacket<WithStreamedUnaryMethod_OnTrackPacket<Service > > > > > > > > > > StreamedService;
};


#endif  // GRPC_rpc_2eproto__INCLUDED
