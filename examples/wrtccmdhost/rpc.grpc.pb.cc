// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* Rpc_method_names[] = {
  "/Rpc/NewPC",
  "/Rpc/CreateOffer",
  "/Rpc/CreateAnswer",
  "/Rpc/SetLocalDesc",
  "/Rpc/SetRemoteDesc",
  "/Rpc/AddTracks",
  "/Rpc/NewUrlTracks",
  "/Rpc/NewTrackSrcs",
  "/Rpc/TrackSrcSendPacket",
  "/Rpc/OnTrackPacket",
};

std::unique_ptr< Rpc::Stub> Rpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Rpc::Stub> stub(new Rpc::Stub(channel));
  return stub;
}

Rpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_NewPC_(Rpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateOffer_(Rpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAnswer_(Rpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLocalDesc_(Rpc_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRemoteDesc_(Rpc_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddTracks_(Rpc_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewUrlTracks_(Rpc_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewTrackSrcs_(Rpc_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TrackSrcSendPacket_(Rpc_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnTrackPacket_(Rpc_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rpc::Stub::NewPC(::grpc::ClientContext* context, const ::NewPCReq& request, ::NewPCRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewPC_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::NewPCRes>* Rpc::Stub::AsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewPCRes>::Create(channel_.get(), cq, rpcmethod_NewPC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NewPCRes>* Rpc::Stub::PrepareAsyncNewPCRaw(::grpc::ClientContext* context, const ::NewPCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewPCRes>::Create(channel_.get(), cq, rpcmethod_NewPC_, context, request, false);
}

::grpc::Status Rpc::Stub::CreateOffer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateOffer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* Rpc::Stub::AsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OfferAnswerRes>::Create(channel_.get(), cq, rpcmethod_CreateOffer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* Rpc::Stub::PrepareAsyncCreateOfferRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OfferAnswerRes>::Create(channel_.get(), cq, rpcmethod_CreateOffer_, context, request, false);
}

::grpc::Status Rpc::Stub::CreateAnswer(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::OfferAnswerRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAnswer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* Rpc::Stub::AsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OfferAnswerRes>::Create(channel_.get(), cq, rpcmethod_CreateAnswer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::OfferAnswerRes>* Rpc::Stub::PrepareAsyncCreateAnswerRaw(::grpc::ClientContext* context, const ::OfferAnswerReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::OfferAnswerRes>::Create(channel_.get(), cq, rpcmethod_CreateAnswer_, context, request, false);
}

::grpc::Status Rpc::Stub::SetLocalDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLocalDesc_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::SetDescRes>* Rpc::Stub::AsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SetDescRes>::Create(channel_.get(), cq, rpcmethod_SetLocalDesc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SetDescRes>* Rpc::Stub::PrepareAsyncSetLocalDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SetDescRes>::Create(channel_.get(), cq, rpcmethod_SetLocalDesc_, context, request, false);
}

::grpc::Status Rpc::Stub::SetRemoteDesc(::grpc::ClientContext* context, const ::SetDescReq& request, ::SetDescRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRemoteDesc_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::SetDescRes>* Rpc::Stub::AsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SetDescRes>::Create(channel_.get(), cq, rpcmethod_SetRemoteDesc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SetDescRes>* Rpc::Stub::PrepareAsyncSetRemoteDescRaw(::grpc::ClientContext* context, const ::SetDescReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SetDescRes>::Create(channel_.get(), cq, rpcmethod_SetRemoteDesc_, context, request, false);
}

::grpc::Status Rpc::Stub::AddTracks(::grpc::ClientContext* context, const ::AddTracksReq& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTracks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::AsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_AddTracks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::PrepareAsyncAddTracksRaw(::grpc::ClientContext* context, const ::AddTracksReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_AddTracks_, context, request, false);
}

::grpc::Status Rpc::Stub::NewUrlTracks(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::NewUrlTracksRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewUrlTracks_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>* Rpc::Stub::AsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewUrlTracksRes>::Create(channel_.get(), cq, rpcmethod_NewUrlTracks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NewUrlTracksRes>* Rpc::Stub::PrepareAsyncNewUrlTracksRaw(::grpc::ClientContext* context, const ::NewUrlTracksReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewUrlTracksRes>::Create(channel_.get(), cq, rpcmethod_NewUrlTracks_, context, request, false);
}

::grpc::Status Rpc::Stub::NewTrackSrcs(::grpc::ClientContext* context, const ::Empty& request, ::NewTrackSrcsRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewTrackSrcs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>* Rpc::Stub::AsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewTrackSrcsRes>::Create(channel_.get(), cq, rpcmethod_NewTrackSrcs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NewTrackSrcsRes>* Rpc::Stub::PrepareAsyncNewTrackSrcsRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NewTrackSrcsRes>::Create(channel_.get(), cq, rpcmethod_NewTrackSrcs_, context, request, false);
}

::grpc::Status Rpc::Stub::TrackSrcSendPacket(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TrackSrcSendPacket_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::AsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_TrackSrcSendPacket_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::PrepareAsyncTrackSrcSendPacketRaw(::grpc::ClientContext* context, const ::TrackSrcSendPacketReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_TrackSrcSendPacket_, context, request, false);
}

::grpc::Status Rpc::Stub::OnTrackPacket(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnTrackPacket_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::AsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_OnTrackPacket_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Rpc::Stub::PrepareAsyncOnTrackPacketRaw(::grpc::ClientContext* context, const ::OnTrackPacketMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_OnTrackPacket_, context, request, false);
}

Rpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::NewPCReq, ::NewPCRes>(
          std::mem_fn(&Rpc::Service::NewPC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::OfferAnswerReq, ::OfferAnswerRes>(
          std::mem_fn(&Rpc::Service::CreateOffer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::OfferAnswerReq, ::OfferAnswerRes>(
          std::mem_fn(&Rpc::Service::CreateAnswer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::SetDescReq, ::SetDescRes>(
          std::mem_fn(&Rpc::Service::SetLocalDesc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::SetDescReq, ::SetDescRes>(
          std::mem_fn(&Rpc::Service::SetRemoteDesc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::AddTracksReq, ::Empty>(
          std::mem_fn(&Rpc::Service::AddTracks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::NewUrlTracksReq, ::NewUrlTracksRes>(
          std::mem_fn(&Rpc::Service::NewUrlTracks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::Empty, ::NewTrackSrcsRes>(
          std::mem_fn(&Rpc::Service::NewTrackSrcs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::TrackSrcSendPacketReq, ::Empty>(
          std::mem_fn(&Rpc::Service::TrackSrcSendPacket), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::OnTrackPacketMsg, ::Empty>(
          std::mem_fn(&Rpc::Service::OnTrackPacket), this)));
}

Rpc::Service::~Service() {
}

::grpc::Status Rpc::Service::NewPC(::grpc::ServerContext* context, const ::NewPCReq* request, ::NewPCRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::CreateOffer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::CreateAnswer(::grpc::ServerContext* context, const ::OfferAnswerReq* request, ::OfferAnswerRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::SetLocalDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::SetRemoteDesc(::grpc::ServerContext* context, const ::SetDescReq* request, ::SetDescRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::AddTracks(::grpc::ServerContext* context, const ::AddTracksReq* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::NewUrlTracks(::grpc::ServerContext* context, const ::NewUrlTracksReq* request, ::NewUrlTracksRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::NewTrackSrcs(::grpc::ServerContext* context, const ::Empty* request, ::NewTrackSrcsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::TrackSrcSendPacket(::grpc::ServerContext* context, const ::TrackSrcSendPacketReq* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::OnTrackPacket(::grpc::ServerContext* context, const ::OnTrackPacketMsg* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


